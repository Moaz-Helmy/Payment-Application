/******************************************************************************
 *
 * Module: Card Module
 *
 * File Name: card.c
 *
 * Description: Source file for card module
 *
 * Author: Moaz Mohamed
 *
 *******************************************************************************/

/*******************************************************************************
 *                                Includes                                     *
 *******************************************************************************/
#include "card.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*
 * Description :
 * 1- This function will ask for the cardholder's name and store it into card data.
 * 2- Card holder name is 24 characters string max and 20 min.
 * 3- If the card holder name is NULL, less than 20 characters or more than 24 will
 * 	  return WRONG_NAME error, else return CARD_OK.
 */
EN_cardError_t getCardHolderName(ST_cardData_t *cardData)
{
	/*Local variable to store the length of the input name*/
	uint8_t nameLength=0;

	/*Prompt the user to enter the name*/
	puts("Please Enter card holder's Name...");

	/*Store the input name in the card Data structure*/
	gets((char*)cardData->cardHolderName);

	/*Calculate the length of the name*/
	nameLength=strlen((const char*)cardData->cardHolderName);

	/*Check name length constraints*/
	if(cardData->cardHolderName==NULL || nameLength<20 || nameLength>24)
	{
		/*If the name doesn't meet the constraints*/
		puts("Invalid Name");
		return WRONG_NAME;
	}
	else
	{
		/*If the name meets the constraints*/
		return CARD_OK;
	}
}

/*
 * Description :
 * 1- This function will ask for the card expiry date and store it in card data.
 * 2- Card expiry date is 5 characters string in the format "MM/YY", e.g "05/25".
 * 3- If the card expiry date is NULL, less or more than 5 characters, or has the
 * 	  wrong format will return WRONG_EXP_DATE error, else return CARD_OK.
 */
EN_cardError_t getCardExpiryDate(ST_cardData_t *cardData)
{
	/*Variable to store the length of the input date*/
	uint8_t dateLength=0;

	/*Variable to store the input month*/
	uint8_t inputMonth=0;

	/*Variable to store the input year*/
	uint16_t inputYear=0;

	/*Prompt for the user to enter the expiry date*/
	puts("Please Enter Expiry Date...");

	/*Store the input in the card data structure*/
	gets((char*)cardData->cardExpirationDate);

	/*Calculate the length*/
	dateLength=strlen((const char*)cardData->cardExpirationDate);

	/*Check the length of the input string*/
	if(cardData->cardExpirationDate==NULL || dateLength!=5)
	{
		/*If it doesn't equal 5, output "Invalid Expiry Date"*/
		puts("Invalid Expiry Date");
		return WRONG_EXP_DATE;
	}

	/*Check whether the third character is a slash to make sure the date is in the correct format*/
	if(cardData->cardExpirationDate[2] !='/' )
	{
		puts("Invalid Expiry Date");
		return WRONG_EXP_DATE;
	}

	/*Calculate the month as a number*/
	inputMonth=atoi((const char*)cardData->cardExpirationDate);

	/*Calculate the year as a number*/
	inputYear=atoi((const char*)cardData->cardExpirationDate+3)+2000;

	/*Check whether the input month and year are larger than today's date*/
	if((inputMonth > 12) || (inputMonth<=0) || (inputYear<=0))
	{
		puts("Invalid Expiry Date");

		/*If not, it's an invalid date*/
		return WRONG_EXP_DATE;
	}

	/*Else, return successfully*/
	return CARD_OK;
}

/*
 * Description :
 * 1- This function will ask for the card's Primary Account Number and store it in card data.
 * 2- PAN is 20 characters numeric only string 19 character max, and 16 character min.
 * 3- If the PAN is NULL, less than 16 or more than 19 characters, will return WRONG_PAN error,
 *    else return CARD_OK.
 */
EN_cardError_t getCardPAN(ST_cardData_t *cardData)
{
	/*Variable to store the PAN length*/
	uint8_t PANLength=0;

	/*Variable to index the input PAN*/
	uint8_t strIndex=0;

	/*Prompt for the user to enter the PAN*/
	puts("Please Enter Primary Account Number (PAN)...");

	/*Store the input PAN in the card data structure*/
	gets((char*)cardData->primaryAccountNumber);

	/*Calculate the PAN length*/
	PANLength=strlen((const char*)cardData->primaryAccountNumber);

	/*Check whether the input PAN meets the length constraints*/
	if(cardData->primaryAccountNumber==NULL || PANLength<16 || PANLength>19)
	{
		/*If not, return Wrong_PAN*/
		puts("Invalid PAN");
		return WRONG_PAN;
	}

	/*Make sure that every character is an ascii representation of a number*/
	for(strIndex=0; strIndex<PANLength ;strIndex++)
	{
		/*Make sure the character is in the range of the ascii for 0 and 9*/
		if(cardData->primaryAccountNumber[strIndex]>=ASCII_OF_0 && cardData->primaryAccountNumber[strIndex]<=ASCII_OF_9)
		{
			/*If it meets the requirements, move on to the next character*/
			continue;
		}
		else
		{
			/*If not, return Wrong_PAN*/
			puts("Invalid PAN2");
			return WRONG_PAN;
		}
	}

	/*If the loop ended successfully, it means that all constraints were met*/
	return CARD_OK;
}
